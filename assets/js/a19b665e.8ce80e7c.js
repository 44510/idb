"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[505],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>s});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(t),s=i,h=m["".concat(p,".").concat(s)]||m[s]||u[s]||o;return t?r.createElement(h,a(a({ref:n},d),{},{components:t})):r.createElement(h,a({ref:n},d))}));function s(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3265:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>l,contentTitle:()=>p,metadata:()=>c,toc:()=>d,default:()=>m});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],l={id:"development",title:"Development"},p=void 0,c={unversionedId:"development",id:"development",isDocsHomePage:!1,title:"Development",description:"Building & Running the idb cli",source:"@site/docs/development.mdx",sourceDirName:".",slug:"/development",permalink:"/docs/development",tags:[],version:"current",frontMatter:{id:"development",title:"Development"},sidebar:"docs",previous:{title:"Architecture",permalink:"/docs/architecture"},next:{title:"Commands",permalink:"/docs/commands"}},d=[{value:"Building &amp; Running the idb cli",id:"building--running-the-idb-cli",children:[],level:2},{value:"Building &amp; Running the idb_companion",id:"building--running-the-idb_companion",children:[],level:2}],u={toc:d};function m(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"building--running-the-idb-cli"},"Building & Running the ",(0,o.kt)("a",{parentName:"h2",href:"architecture#the-idb-cli"},(0,o.kt)("inlineCode",{parentName:"a"},"idb")," cli")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"idb")," cli is python based and can simply be built using ",(0,o.kt)("inlineCode",{parentName:"p"},"pip")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"pip3 install .\n")),(0,o.kt)("h2",{id:"building--running-the-idb_companion"},"Building & Running the ",(0,o.kt)("a",{parentName:"h2",href:"architecture#the-idb_companion"},(0,o.kt)("inlineCode",{parentName:"a"},"idb_companion"))),(0,o.kt)("p",null,"This is a native macOS executable, built via Xcode."),(0,o.kt)("p",null,"Firstly, there are system level build dependencies that needed, these can be ",(0,o.kt)("a",{parentName:"p",href:"https://brew.sh"},"installed via homebrew"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Tap for grpc\nbrew tap grpc/grpc\n# The grpc compiler is used to generate C++ bindings from the idb.proto definition\nbrew install grpc\n# cocoapods is needed to resolve dependencies for the Xcode project\nbrew install cocoapods\n# cocoapods is used to resolve the grpc runtime library for the companion\n# This must be run from the root of the idb repository to use the appropriate Podfile\npod install\n")),(0,o.kt)("p",null,"This will open an Xcode project that you can build and run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"open idb_companion.xcworkspace\n")),(0,o.kt)("p",null,"After opening the Xcode project you will need to add a ",(0,o.kt)("inlineCode",{parentName:"p"},"--udid")," argument for launch."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Get the UDID of either your device or simulator",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Window -> Devices and Simulators"),(0,o.kt)("li",{parentName:"ul"},"Select the device or simulator you care about"),(0,o.kt)("li",{parentName:"ul"},"Copy the value in the ",(0,o.kt)("inlineCode",{parentName:"li"},"Identifier")," section of the header"))),(0,o.kt)("li",{parentName:"ul"},"Project -> Scheme -> Edit Scheme (or ",(0,o.kt)("inlineCode",{parentName:"li"},"cmd + <"),")"),(0,o.kt)("li",{parentName:"ul"},"Run -> Arguments"),(0,o.kt)("li",{parentName:"ul"},"Click the ",(0,o.kt)("inlineCode",{parentName:"li"},"+")," under the ",(0,o.kt)("inlineCode",{parentName:"li"},"Arguments Passed on Launch")," section"),(0,o.kt)("li",{parentName:"ul"},"Enter ",(0,o.kt)("inlineCode",{parentName:"li"},"--udid <UDID copied above>")),(0,o.kt)("li",{parentName:"ul"},"Run the ",(0,o.kt)("inlineCode",{parentName:"li"},"idb_companion")," target on ",(0,o.kt)("inlineCode",{parentName:"li"},"My Mac"))),(0,o.kt)("p",null,"Once ",(0,o.kt)("inlineCode",{parentName:"p"},"idb_companion")," has launched, it will output the TCP port upon which the companion has bound to ",(0,o.kt)("inlineCode",{parentName:"p"},"stdout"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{"grpc_port":10882}\n')),(0,o.kt)("p",null,"By default this port is ",(0,o.kt)("inlineCode",{parentName:"p"},"10882"),", it can be bound on a random port with ",(0,o.kt)("inlineCode",{parentName:"p"},"--port 0")," or a port of your choosing. You'll now be able to direct ",(0,o.kt)("inlineCode",{parentName:"p"},"idb")," commands against this companion with the ",(0,o.kt)("inlineCode",{parentName:"p"},"IDB_COMPANION")," environment variable passed to the cli:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ IDB_COMPANION=localhost:10882 idb describe\n")),(0,o.kt)("p",null,"As long as you prefix this environment variable before all commands, you'll be able to run commands against the companion that you're currently debugging within Xcode."))}m.isMDXComponent=!0}}]);