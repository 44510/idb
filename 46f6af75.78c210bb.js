(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{71:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(3),i=n(7),l=(n(0),n(83)),r={id:"commands",title:"Commands"},b={unversionedId:"commands",id:"commands",isDocsHomePage:!1,title:"Commands",description:"iOS Target Manipulation",source:"@site/docs/commands.mdx",slug:"/commands",permalink:"/docs/commands",version:"current",sidebar:"docs",previous:{title:"FBDeviceControl",permalink:"/docs/fbdevicecontrol"},next:{title:"Test Execution",permalink:"/docs/test-execution"}},c=[{value:"iOS Target Manipulation",id:"ios-target-manipulation",children:[{value:"Specifying which iOS Target to run against",id:"specifying-which-ios-target-to-run-against",children:[]},{value:"Disconnect a target",id:"disconnect-a-target",children:[]},{value:"List connected targets",id:"list-connected-targets",children:[]},{value:"Boot a simulator",id:"boot-a-simulator",children:[]},{value:"Describe a target",id:"describe-a-target",children:[]},{value:"General arguments",id:"general-arguments",children:[]}]},{value:"Apps",id:"apps",children:[{value:"List apps",id:"list-apps",children:[]},{value:"Install an app",id:"install-an-app",children:[]},{value:"Launch an app",id:"launch-an-app",children:[]},{value:"Kill a running app",id:"kill-a-running-app",children:[]},{value:"Uninstalling an app",id:"uninstalling-an-app",children:[]}]},{value:"Tests",id:"tests",children:[{value:"Install a test bundle",id:"install-a-test-bundle",children:[]},{value:"List installed tests",id:"list-installed-tests",children:[]},{value:"List tests inside a bundle",id:"list-tests-inside-a-bundle",children:[]},{value:"Running tests",id:"running-tests",children:[]}]},{value:"File commands",id:"file-commands",children:[{value:"Copying files into a container",id:"copying-files-into-a-container",children:[]},{value:"Copying files out of a container",id:"copying-files-out-of-a-container",children:[]},{value:"Moving files within the container",id:"moving-files-within-the-container",children:[]},{value:"Make a new directory",id:"make-a-new-directory",children:[]},{value:"Remove a path on a target",id:"remove-a-path-on-a-target",children:[]},{value:"List a path on a target",id:"list-a-path-on-a-target",children:[]}]},{value:"Debug an app",id:"debug-an-app",children:[{value:"Starting a debug session",id:"starting-a-debug-session",children:[]},{value:"Stop a debug session",id:"stop-a-debug-session",children:[]},{value:"Information about a debug session",id:"information-about-a-debug-session",children:[]}]},{value:"Interact",id:"interact",children:[{value:"Tap",id:"tap",children:[]},{value:"Swipe",id:"swipe",children:[]},{value:"Press a button",id:"press-a-button",children:[]},{value:"Inputting text",id:"inputting-text",children:[]}]},{value:"Accessibility info",id:"accessibility-info",children:[{value:"Describe the whole screen",id:"describe-the-whole-screen",children:[]},{value:"Describe a point",id:"describe-a-point",children:[]}]},{value:"Misc",id:"misc",children:[{value:"Reset Idb",id:"reset-idb",children:[]},{value:"Focus a simulators window",id:"focus-a-simulators-window",children:[]},{value:"Install a .dylib",id:"install-a-dylib",children:[]},{value:"Instruments",id:"instruments",children:[]},{value:"Record a video",id:"record-a-video",children:[]},{value:"Log",id:"log",children:[]},{value:"Open a url",id:"open-a-url",children:[]},{value:"Clear the keychain",id:"clear-the-keychain",children:[]},{value:"Set a simulators location",id:"set-a-simulators-location",children:[]},{value:"Add media",id:"add-media",children:[]},{value:"Approve",id:"approve",children:[]},{value:"Add contacts",id:"add-contacts",children:[]}]},{value:"Crash logs",id:"crash-logs",children:[{value:"List crash logs",id:"list-crash-logs",children:[]},{value:"Fetch a crash log",id:"fetch-a-crash-log",children:[]},{value:"Delete crash logs",id:"delete-crash-logs",children:[]}]},{value:"Companion Commands",id:"companion-commands",children:[{value:"Starting a <code>gRPC</code> Server",id:"starting-a-grpc-server",children:[]},{value:"Starting a notifier",id:"starting-a-notifier",children:[]}]}],o={rightToc:c};function s(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"ios-target-manipulation"},"iOS Target Manipulation"),Object(l.b)("h3",{id:"specifying-which-ios-target-to-run-against"},"Specifying which iOS Target to run against"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"idb")," maintains local state of iOS Targets that it is aware of. This state can be modified or bypassed. The ",Object(l.b)("inlineCode",{parentName:"p"},"idb")," leans heavily on the ",Object(l.b)("inlineCode",{parentName:"p"},"idb_companion")," in order to process requests. As such all commands that manipulate iOS Targets requires a companion to service them."),Object(l.b)("p",null,"If you can pass the location of the companion in each call, then there is no need to modify this internal state. All ",Object(l.b)("inlineCode",{parentName:"p"},"idb")," commands can be prefixed with the ",Object(l.b)("inlineCode",{parentName:"p"},"IDB_COMPANION")," environment variable, which will directly address a given companion"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"# Run a describe command against a companion running on the loopback interface\n# on TCP Port 10882\nIDB_COMPANION=localhost:10882 idb describe\n# This can also be a path to a domain socket that the companion is running on\nIDB_COMPANION=/tmp/idb_companion_domain_sock idb describe\n")),Object(l.b)("p",null,"Addressing via a UDID instead of the companion address is achieved by ",Object(l.b)("inlineCode",{parentName:"p"},"connect"),"ing a companion, so that this knowledge persists over invocations:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb connect COMPANION_HOST COMPANION_PORT\n")),Object(l.b)("p",null,"Alternatively, pass a UDID instead of an address to transparently start a companion for the provided UDID in the background:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb connect TARGET_UDID\n")),Object(l.b)("p",null,"Manual companion creation can be entirely bypassed by providing a UDID to command invocations. This will transparently start a companion in the background if one is not yet created for the provided UDID. Further invocations for this UDID will use the same companion from the first invocation."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb describe --udid TARGET_UDID\n")),Object(l.b)("h3",{id:"disconnect-a-target"},"Disconnect a target"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb disconnect COMPANION_HOST COMPANION_PORT\nidb disconnect TARGET_UDID\n")),Object(l.b)("p",null,"The opposite of ",Object(l.b)("inlineCode",{parentName:"p"},"connect"),". This will not terminate the companion backing this target"),Object(l.b)("h3",{id:"list-connected-targets"},"List connected targets"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"idb")," is aware of the companions that you have manually connected, as well as other iOS targets that do not yet have companions. This can be shown with ",Object(l.b)("inlineCode",{parentName:"p"},"list-targets"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb list-targets\n")),Object(l.b)("p",null,"The output will show which targets do and don't have companions associated with them."),Object(l.b)("h3",{id:"boot-a-simulator"},"Boot a simulator"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb --boot UDID\n")),Object(l.b)("p",null,"This will only apply to iOS Simulators."),Object(l.b)("h3",{id:"describe-a-target"},"Describe a target"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb describe\n")),Object(l.b)("p",null,"Returns metadata about the specified target, including:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"UDID"),Object(l.b)("li",{parentName:"ul"},"Name"),Object(l.b)("li",{parentName:"ul"},"Screen dimensions and density"),Object(l.b)("li",{parentName:"ul"},"State (booted/...)"),Object(l.b)("li",{parentName:"ul"},"Type (simulator/device)"),Object(l.b)("li",{parentName:"ul"},"iOS version"),Object(l.b)("li",{parentName:"ul"},"Architecture"),Object(l.b)("li",{parentName:"ul"},"Information about its companion")),Object(l.b)("h3",{id:"general-arguments"},"General arguments"),Object(l.b)("p",null,"In addition to arguments that are relevant to specific commands, there are other optional arguments that apply to all commands."),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Default"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"--udid UDID"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"UDID of the target"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"If only one target is connected it'll use that one")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"--log {DEBUG,INFO,WARNING,ERROR,CRITICAL}"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Set the log level"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"CRITICAL")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"--json"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"JSON structured output where applicable"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"False")))),Object(l.b)("h2",{id:"apps"},"Apps"),Object(l.b)("h3",{id:"list-apps"},"List apps"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb list-apps\n")),Object(l.b)("p",null,"Lists the targets installed applications and their metadata, including:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Bundle ID"),Object(l.b)("li",{parentName:"ul"},"Name"),Object(l.b)("li",{parentName:"ul"},"Install type (user, system)"),Object(l.b)("li",{parentName:"ul"},"Architectures"),Object(l.b)("li",{parentName:"ul"},"Running status"),Object(l.b)("li",{parentName:"ul"},"Debuggable status")),Object(l.b)("h3",{id:"install-an-app"},"Install an app"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb install /path/to/testApp.app\n")),Object(l.b)("p",null,"Installs the given ",Object(l.b)("inlineCode",{parentName:"p"},".app")," or ",Object(l.b)("inlineCode",{parentName:"p"},".ipa"),". The app target architecture should match that of the target."),Object(l.b)("h3",{id:"launch-an-app"},"Launch an app"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb launch com.apple.Maps\n")),Object(l.b)("p",null,"Any environment variables that are prefixed with IDB_ will be set on the launched app, with that prefix removed."),Object(l.b)("p",null,"Custom launch arguments can also be provided by appending them to the end of the command."),Object(l.b)("p",null,"By default ",Object(l.b)("inlineCode",{parentName:"p"},"idb launch")," will fail if the app is already running, this can be overruled with ",Object(l.b)("inlineCode",{parentName:"p"},"-f/--foreground-if-running"),"."),Object(l.b)("p",null,"To tail the output of the launched process, provide the ",Object(l.b)("inlineCode",{parentName:"p"},"-w/--wait-for")," flag. The ",Object(l.b)("inlineCode",{parentName:"p"},"stdout")," and ",Object(l.b)("inlineCode",{parentName:"p"},"stderr")," of the app will be streamed back until the app exits. When running in this mode, the app will be killed when sending a ",Object(l.b)("inlineCode",{parentName:"p"},"SIGTERM")," to the ",Object(l.b)("inlineCode",{parentName:"p"},"idb")," cli, for example with ",Object(l.b)("inlineCode",{parentName:"p"},"^C")," in a shell."),Object(l.b)("h3",{id:"kill-a-running-app"},"Kill a running app"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb terminate com.apple.Maps\n")),Object(l.b)("p",null,"Kills an app with the given Bundle ID. If the app is not running, or there is no app installed for the given Bundle ID, this will fail"),Object(l.b)("h3",{id:"uninstalling-an-app"},"Uninstalling an app"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb uninstall com.foo.bar\n")),Object(l.b)("p",null,"Removes an app from the target by Bundle ID."),Object(l.b)("h2",{id:"tests"},"Tests"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"idb")," exposes test execution primitives via binaries and has a number of modes of operation. ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"test-execution"}),"Go here for more details about how ",Object(l.b)("inlineCode",{parentName:"a"},"idb")," approaches Test Execution.")),Object(l.b)("h3",{id:"install-a-test-bundle"},"Install a test bundle"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb xctest install testApp.app/Plugins/testAppTests.xctest\n")),Object(l.b)("p",null,'Before a test can be run through idb it must first be installed on the target. This performs a "relocation" process, so that the test bundle can be invoked multiple times in different modes of execution.'),Object(l.b)("p",null,"Both ",Object(l.b)("inlineCode",{parentName:"p"},".xctest")," and ",Object(l.b)("inlineCode",{parentName:"p"},".xctestrun")," files can be installed with this command."),Object(l.b)("h3",{id:"list-installed-tests"},"List installed tests"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb xctest list\n")),Object(l.b)("p",null,"Lists all of the tests installed on a target."),Object(l.b)("h3",{id:"list-tests-inside-a-bundle"},"List tests inside a bundle"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb xctest list-bundle com.facebook.myAppTests\n")),Object(l.b)("p",null,"Lists all of the individual tests inside a test bundle. This will load the test bundle in the target's runtime and discover all of the tests that can be executed."),Object(l.b)("h3",{id:"running-tests"},"Running tests"),Object(l.b)("p",null,"Environment variables that are prefixed with ",Object(l.b)("inlineCode",{parentName:"p"},"IDB_")," will be passed through to the test run with that prefix removed, also any arguments appended to the end of the idb command will be supplied as arguments to the test run."),Object(l.b)("p",null,"Please consult the ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"test-execution"}),"Test Execution section")," for understanding more about the various modes that are available for running tests"),Object(l.b)("h2",{id:"file-commands"},"File commands"),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"idb file"),' commands allow for managing manipulating files on a target. File operations are applied to "containers", which allow manipulation of different iOS subsystems.'),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Switch"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Simulators"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Devices"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"--bundle-id")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),'Apply file operations to the "Application Container" of the provided Bundle ID. This is otherwise known as the "Application Sandbox"'),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"\u2705"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"\u2705 (Only for Applications signed with a Developer Profile)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"--media")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The container for Photos/Videos"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"\u2705"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"\u2705")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"--crashes")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The container for Crash/Diagnostic reports. This can be used to view and pull crash logs from a device"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"\u274c"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"\u2705")))),Object(l.b)("p",null,"Not all commands will make sense for each container. For example, crash containers are read only. However, file operations provide a consisent abstraction on top of views of heirarchical data."),Object(l.b)("h3",{id:"copying-files-into-a-container"},"Copying files into a container"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb file push --bundle-id com.foo.bar src1.jpg src2.jpg dest_1\n")),Object(l.b)("p",null,"Copies one or more files from the host to the relative destination path within the container."),Object(l.b)("h3",{id:"copying-files-out-of-a-container"},"Copying files out of a container"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb file pull --bundle-id com.foo.bar src.txt dest.txt\n")),Object(l.b)("p",null,"Copies a single file from the container to the host."),Object(l.b)("h3",{id:"moving-files-within-the-container"},"Moving files within the container"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb file mv --bundle-id com.foo.bar src1.jpg src2.jpg dest_1\n")),Object(l.b)("p",null,"This will move two image files from the root of the container, to a destination subdirectory within the container."),Object(l.b)("h3",{id:"make-a-new-directory"},"Make a new directory"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb file mkdir --bundle-id com.foo.bar newdir\n")),Object(l.b)("p",null,"Creates a new folder within the apps data container."),Object(l.b)("h3",{id:"remove-a-path-on-a-target"},"Remove a path on a target"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb file rm PATH_A PATH_B --bundle-id BUNDLE_ID\n")),Object(l.b)("p",null,"Removes the specified paths within an apps data container."),Object(l.b)("p",null,"If a folder is specified to be deleted, all of its contents will be removed recursively."),Object(l.b)("h3",{id:"list-a-path-on-a-target"},"List a path on a target"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb file ls --bundle-id com.foo.bar directory1 directory2\n")),Object(l.b)("p",null,"Returns a list of all the files present within one or more directories."),Object(l.b)("h2",{id:"debug-an-app"},"Debug an app"),Object(l.b)("h3",{id:"starting-a-debug-session"},"Starting a debug session"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb debugserver start BUNDLE_ID\n")),Object(l.b)("p",null,"Starts a debug session. The output will be similar to ",Object(l.b)("inlineCode",{parentName:"p"},"process connect connect://localhost:10881")," and it will be used to start the lldb. In another terminal, type in the command ",Object(l.b)("inlineCode",{parentName:"p"},"lldb"),", which will start the lldb. There, type the output of the start command to connect the debug server."),Object(l.b)("h3",{id:"stop-a-debug-session"},"Stop a debug session"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb debugserver stop\n")),Object(l.b)("p",null,"Stops a running debug session."),Object(l.b)("h3",{id:"information-about-a-debug-session"},"Information about a debug session"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb debugserver status\n")),Object(l.b)("p",null,"Display metadata about any running debug sessions."),Object(l.b)("h2",{id:"interact"},"Interact"),Object(l.b)("p",null,"For simulators we provide a handful of commands for emulating HID events."),Object(l.b)("h3",{id:"tap"},"Tap"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb ui tap X Y\n")),Object(l.b)("p",null,"Taps a location on the screen specified in the points coordinate system.\nThe tap duration can be set with ",Object(l.b)("inlineCode",{parentName:"p"},"--duration")),Object(l.b)("h3",{id:"swipe"},"Swipe"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb ui swipe X_START Y_START X_END Y_END\n")),Object(l.b)("p",null,"Swipes from the specified start point to the end.\nBy default this will be done by a touch down at the start point, followed by moving 10 points at a time until the end point is reached. The size of each step can be specified with ",Object(l.b)("inlineCode",{parentName:"p"},"--delta"),"."),Object(l.b)("h3",{id:"press-a-button"},"Press a button"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb ui button {APPLE_PAY,HOME,LOCK,SIDE_BUTTON,SIRI}\n")),Object(l.b)("p",null,"Simulates a press of the specified button.\nThe press duration can be set with ",Object(l.b)("inlineCode",{parentName:"p"},"--duration"),"."),Object(l.b)("h3",{id:"inputting-text"},"Inputting text"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),'idb ui text "some text"\n')),Object(l.b)("p",null,"Types the specified text into the target."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb ui key 4\n")),Object(l.b)("p",null,"Simulates the press of a key specified by its keycode.\nThe key presses duration can be set with ",Object(l.b)("inlineCode",{parentName:"p"},"--duration"),"."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb ui key-sequence 4 5 6\n")),Object(l.b)("p",null,"Inputs multiple key events sequentially."),Object(l.b)("h2",{id:"accessibility-info"},"Accessibility info"),Object(l.b)("h3",{id:"describe-the-whole-screen"},"Describe the whole screen"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb ui describe-all\n")),Object(l.b)("p",null,"Returns a JSON formatted list of all the elements currently on screen, including their bounds and accessibility information."),Object(l.b)("h3",{id:"describe-a-point"},"Describe a point"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb ui describe-point X Y\n")),Object(l.b)("p",null,"Returns JSON formatted information about a specific point on the screen, if an element exists there."),Object(l.b)("h2",{id:"misc"},"Misc"),Object(l.b)("h3",{id:"reset-idb"},"Reset Idb"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb kill\n")),Object(l.b)("p",null,"idb stores information about available companions in a local file. this command clears these files and kills the idb notifier if one is running."),Object(l.b)("h3",{id:"focus-a-simulators-window"},"Focus a simulators window"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb focus\n")),Object(l.b)("p",null,"Brings a simulators window to the foreground."),Object(l.b)("h3",{id:"install-a-dylib"},"Install a .dylib"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb dylib install test.dylib\n")),Object(l.b)("p",null,"Installs a ",Object(l.b)("inlineCode",{parentName:"p"},".dylib")," on the target. This can then be injected into apps on launch."),Object(l.b)("h3",{id:"instruments"},"Instruments"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb instruments TEMPLATE\n")),Object(l.b)("p",null,"Starts instruments running connected to the target"),Object(l.b)("h3",{id:"record-a-video"},"Record a video"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb record video OUTPUT_MP4\n")),Object(l.b)("p",null,"Starts recording the targets screen, outputting the content to the specified path. The recording can be stopped by pressing ",Object(l.b)("inlineCode",{parentName:"p"},"^C"),"."),Object(l.b)("h3",{id:"log"},"Log"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb log\n")),Object(l.b)("p",null,"Tail logs from a target, uses the standard log(1) stream arguments"),Object(l.b)("h3",{id:"open-a-url"},"Open a url"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb open https://facebook.com\n")),Object(l.b)("p",null,"Opens the specified URL on the target.\nThis works both with web addresses and URL schemes present on the target."),Object(l.b)("h3",{id:"clear-the-keychain"},"Clear the keychain"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb clear_keychain\n")),Object(l.b)("p",null,"For simulators idb can clear the entire keychain."),Object(l.b)("h3",{id:"set-a-simulators-location"},"Set a simulators location"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb set_location LAT LONG\n")),Object(l.b)("p",null,"Overrides a simulators location to the latitude, longitude pair specified."),Object(l.b)("h3",{id:"add-media"},"Add media"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb add-media cat.jpg dog.mov\n")),Object(l.b)("p",null,"Files supplied to this command will be placed in the targets camera roll.\nMost common image and video file formats are supported."),Object(l.b)("h3",{id:"approve"},"Approve"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb approve com.apple.Maps photos camera\n")),Object(l.b)("p",null,"For simulators idb can programmatically approve permission for an app.\nCurrently idb can approve:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"photos")," - Permission to view the camera roll"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"camera")," - Permission to access the camera"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"contacts")," - Permission to access the targets contacts")),Object(l.b)("h3",{id:"add-contacts"},"Add contacts"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb contacts update db.sqlite\n")),Object(l.b)("p",null,"For simulators idb can overwrite the simulators contacts db."),Object(l.b)("h2",{id:"crash-logs"},"Crash logs"),Object(l.b)("p",null,"idb includes several commands for fetching and managing a targets crash logs."),Object(l.b)("h3",{id:"list-crash-logs"},"List crash logs"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb crash list\n")),Object(l.b)("p",null,"Fetches a list of crash logs present on the target.\nThe results can be filtered by providing ",Object(l.b)("inlineCode",{parentName:"p"},"--before/--since/--bundle-id"),"."),Object(l.b)("h3",{id:"fetch-a-crash-log"},"Fetch a crash log"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb crash show CRASH_NAME\n")),Object(l.b)("p",null,"Fetches the crash log with the specified name"),Object(l.b)("h3",{id:"delete-crash-logs"},"Delete crash logs"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb crash delete CRASH_NAME\nidb crash delete --before/--since/--all X\n")),Object(l.b)("p",null,"Deletes crash logs, either specified by name or all those matching the provided filters  ",Object(l.b)("inlineCode",{parentName:"p"},"--before/--since/--bundle-id/--all"),"."),Object(l.b)("h2",{id:"companion-commands"},"Companion Commands"),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"idb_companion")," is a native Objective-C++ executable that is used to manipulate iOS Simulators & Devices. It implements many of the CRUD-style operations associated with iOS resources and exposes a ",Object(l.b)("inlineCode",{parentName:"p"},"gRPC")," interface that can be consumed by the ",Object(l.b)("inlineCode",{parentName:"p"},"idb")," client."),Object(l.b)("p",null,"When using ",Object(l.b)("inlineCode",{parentName:"p"},"idb")," for ad-hoc usage, you likely won't need to use the ",Object(l.b)("inlineCode",{parentName:"p"},"idb_companion")," cli directly as it's wrapped by the ",Object(l.b)("inlineCode",{parentName:"p"},"idb")," cli. However, it can be used directly if needed."),Object(l.b)("h3",{id:"starting-a-grpc-server"},"Starting a ",Object(l.b)("inlineCode",{parentName:"h3"},"gRPC")," Server"),Object(l.b)("p",null,"To start a companion server for an iOS Simulator or Device that you have running on your machine:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb_companion --udid UDID\n")),Object(l.b)("p",null,"The companion server will be started for the given UDID. If the given ",Object(l.b)("inlineCode",{parentName:"p"},"UDID")," cannot be found, the companion launch will fail. ",Object(l.b)("inlineCode",{parentName:"p"},"UDID"),"s have different formats and the companion will parse it in order to find the appropriate target."),Object(l.b)("p",null,"There are a number of additional switches for altering companion behaviour. These are documented via ",Object(l.b)("inlineCode",{parentName:"p"},"idb_companion --help")," and can also be seen in the table below:"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Default"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"--udid UDID"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Specify the target device / simulator"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"--port PORT"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The TCP port to start the ",Object(l.b)("inlineCode",{parentName:"td"},"gRPC")," Server on"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"10882")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"--log-file-path PATH"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Path to write companion logs to"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Will log to ",Object(l.b)("inlineCode",{parentName:"td"},"stderr"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"--device-set-path PATH"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"iOS Simulator custom device set path"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"~/Library/Developer/CoreSimulator/Devices"))))),Object(l.b)("p",null,"When using the ",Object(l.b)("inlineCode",{parentName:"p"},"idb")," cli directly on iOS targets local to your Mac you won't need to start companions manually. However, it can be handy to use this for debugging or manually managing companions. You might wish to manually manage companions when exposing a companion over the network to another machine, or if you have an Application built on top of ",Object(l.b)("inlineCode",{parentName:"p"},"idb")," where you wish to precisely control the lifecycle of the companion and it's logs."),Object(l.b)("h3",{id:"starting-a-notifier"},"Starting a notifier"),Object(l.b)("p",null,'The companion can operate in "notifier" mode. This means that all changes in Device & Simulator availability are written out. This is useful for discovering the state of Simulators & Devices over time.'),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"idb_companion --notify FILE_PATH|stdout\n")),Object(l.b)("p",null,"It's also used as an implementation detail of how the ",Object(l.b)("inlineCode",{parentName:"p"},"idb")," cli discovers what targets it can connect to, when the ",Object(l.b)("inlineCode",{parentName:"p"},"idb")," cli is run on macOS."),Object(l.b)("p",null,"If ",Object(l.b)("inlineCode",{parentName:"p"},"stdout")," is provided, updates will be written to ",Object(l.b)("inlineCode",{parentName:"p"},"stdout")," instead of the provided file path."))}s.isMDXComponent=!0},83:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=i.a.createContext({}),s=function(e){var t=i.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):b(b({},t),e)),n},d=function(e){var t=s(e.components);return i.a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),d=s(n),u=a,h=d["".concat(r,".").concat(u)]||d[u]||p[u]||l;return n?i.a.createElement(h,b(b({ref:t},o),{},{components:n})):i.a.createElement(h,b({ref:t},o))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=u;var b={};for(var c in t)hasOwnProperty.call(t,c)&&(b[c]=t[c]);b.originalType=e,b.mdxType="string"==typeof e?e:a,r[1]=b;for(var o=2;o<l;o++)r[o]=n[o];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);